package main

import (
	"flag"
	"fmt"
	"json"
	"os"
	"os/signal"
	"syscall"

	"github.com/bwmarrin/discordgo"
)

// Needed for cli action
var (
	Token string
)

func init() {

	flag.StringVar(&Token, "t", "", "Bot token")
	flag.Parse()
}

type AutoGenerated struct {
	Data []struct {
		ID           string    `json:"id"`
		UserID       string    `json:"user_id"`
		UserName     string    `json:"user_name"`
		GameID       string    `json:"game_id"`
		Type         string    `json:"type"`
		Title        string    `json:"title"`
		ViewerCount  int       `json:"viewer_count"`
		StartedAt    time.Time `json:"started_at"`
		Language     string    `json:"language"`
		ThumbnailURL string    `json:"thumbnail_url"`
		TagIds      []string   `json:"tag_ids"`
	} `json:"data"`
	Pagination struct {
		Cursor string `json:"cursor"`
	} `json:"pagination"`
}

func main() {

	// Create a new Discord session
	dg, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("Could not create discord session:", err)
		return
	}

	// Registers messageCreate actions as callbacks
	dg.AddHandler(messageCreate)

	// Opens a connection to discord and listens
	err = dg.Open()
	if err != nil {
		fmt.Println("Could not open a web socket:", err)
		return
	}

	// Wait here until CTRL-C or other term signal is received.
	fmt.Println("The bot is running.  Press CTRL-C to exit.")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)
	<-sc

	// Cleanly close down the Discord session.
	dg.Close()
}

func yeet() {
	url := "https://api.twitch.tv/helix/streams?user_id=51496027"
	var bearer = "<my_token>"

	req, err := http.NewRequest("GET", url, nil)
	req.Header.Add("Client-ID", bearer)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Println("Error in response.\n[ERRO] -", err)
	}

	var response AutoGenerated
	err = json.NewDecoder(resp.Body).Decode(&response)
	if err != nil {
		fmt.Printf("Error: failed decoding body: %v", err)
	}

	fmt.Println("Stream began at: ", response.Data[0].StartedAt)
	fmt.Println("Stream title: ", response.Data[0].Title)
	fmt.Println("Total viewers: ", response.Data[0].ViewerCount)
}

// This function will be called (due to AddHandler above) every time a new
// message is created on any channel that the autenticated bot has access to.
func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {

	// Ignore all messages created by the bot itself
	// This isn't required in this specific example but it's a good practice.
	if m.Author.ID == s.State.User.ID {
		return
	}
	// If the message is "ping" reply with "Pong!"
	if m.Content == "!nilla" {
		s.ChannelMessageSend(m.ChannelID, yeet())
	}

	// If the message is "pong" reply with "Ping!"
	if m.Content == "@Dumbass bitch Becky" {
		s.ChannelMessageSend(m.ChannelID, "Get the h*ck in here :ohloveme:")
	}
}